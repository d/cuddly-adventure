@article{EickCodeDecay,
  author={S. G. {Eick} and T. L. {Graves} and A. F. {Karr} and J. S. {Marron} and A. {Mockus}},
  journal={IEEE Transactions on Software Engineering},
  title={Does code decay? Assessing the evidence from change management data},
  year={2001},
  volume={27},
  number={1},
  pages={1-12},
  doi={10.1109/32.895984}}

@inproceedings{WrightClangMR,
  author={H. K. {Wright} and D. {Jasper} and M. {Klimek} and C. {Carruth} and Z. {Wan}},
  booktitle={2013 IEEE International Conference on Software Maintenance},
  title={Large-Scale Automated Refactoring Using ClangMR},
  year={2013},
  volume={},
  number={},
  pages={548-551},
  doi={10.1109/ICSM.2013.93}}

@inproceedings{KlingerTechDebt,
author = {Klinger, Tim and Tarr, Peri and Wagstrom, Patrick and Williams, Clay},
title = {An Enterprise Perspective on Technical Debt},
year = {2011},
isbn = {9781450305860},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985362.1985371},
doi = {10.1145/1985362.1985371},
abstract = {Technical debt is a term that has been used to describe the increased cost of changing or maintaining a system due to expedient shortcuts taken during its development. Much of the research on technical debt has focused on decisions made by project architects and individual developers who choose to trade off short-term gain for a longer-term cost. However, in the context of enterprise software development, such a model may be too narrow. We explore the premise that technical debt within the enterprise should be viewed as a tool similar to financial leverage, allowing the organization to incur debt to pursue options that it couldn't otherwise afford. We test this premise by interviewing a set of experienced architects to understand how decisions to acquire technical debt are made within an enterprise, and to what extent the acquisition of technical debt provides leverage. We find that in many cases, the decision to acquire technical debt is not made by technical architects, but rather by non-technical stakeholders who cause the project to acquire new technical debt or discover existing technical debt that wasn't previously visible. We conclude with some preliminary observations and recommendations for organizations to better manage technical debt in the presence of some enterprise-scale circumstances.},
booktitle = {Proceedings of the 2nd Workshop on Managing Technical Debt},
pages = {35â€“38},
numpages = {4},
keywords = {technical debt, leverage, extended stakeholders},
location = {Waikiki, Honolulu, HI, USA},
series = {MTD '11}
}

@online{COMRefCount,
	author = {Microsoft},
	title = {Managing Object Lifetimes Through Reference Counting},
	year = {2018},
	url= {https://docs.microsoft.com/en-us/windows/win32/com/managing-object-lifetimes-through-reference-counting},
	month={May},
	lastaccessed={January 25, 2021}
}

@online{HinnantMove,
	author = {Howard Hinnant},
	title = {Everything You Ever Wanted To Know About Move Semantics (and then some)},
	year = {2016},
	url = {https://howardhinnant.github.io/bloomberg_2016.pdf},
	month = {July},
	lastaccessed = {January 25, 2021}
}
